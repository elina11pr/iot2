#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç IoT –ø—Ä–∏—Å—Ç—Ä–æ—é –±–µ–∑ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î httpbin.org –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—ñ–≤
"""

import json
import time
import uuid
from datetime import datetime
import requests
from requests.exceptions import RequestException

def generate_test_data(device_id: str) -> dict:
    """–ì–µ–Ω–µ—Ä—É—î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ"""
    import random
    
    temperature = round(random.uniform(20.0, 30.0), 2)
    return {
        "device_id": device_id,
        "temperature": temperature,
        "unit": "celsius",
        "timestamp": datetime.now().isoformat(),
        "test_mode": True
    }

def test_http_request(data: dict, url: str = "https://httpbin.org/post") -> bool:
    """–¢–µ—Å—Ç—É—î HTTP –∑–∞–ø–∏—Ç"""
    try:
        response = requests.post(
            url,
            json=data,
            timeout=10,
            headers={
                'Content-Type': 'application/json',
                'User-Agent': 'IoT-Device-Test/1.0'
            }
        )
        
        response.raise_for_status()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if url == "https://httpbin.org/post":
            response_data = response.json()
            sent_data = response_data.get('json', {})
            
            # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            if sent_data.get('device_id') == data.get('device_id'):
                print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ: {data['temperature']}¬∞C")
                return True
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å")
                return False
        else:
            print(f"‚úÖ –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π: {response.status_code}")
            return True
            
    except RequestException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

def run_quick_test():
    """–ó–∞–ø—É—Å–∫–∞—î —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É IoT –ø—Ä–∏—Å—Ç—Ä–æ—é")
    print("üì° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è httpbin.org –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
    print("-" * 50)
    
    device_id = str(uuid.uuid4())
    print(f"üÜî Device ID: {device_id}")
    
    # URLs –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_urls = [
        "https://httpbin.org/post",
        "https://httpbin.org/status/200",
        "https://postman-echo.com/post"
    ]
    
    success_count = 0
    total_tests = 3
    
    for i in range(total_tests):
        print(f"\nüì§ –¢–µ—Å—Ç {i + 1}/{total_tests}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        data = generate_test_data(device_id)
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ URL
        if test_http_request(data):
            success_count += 1
        
        # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
        if i < total_tests - 1:
            print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 3 —Å–µ–∫—É–Ω–¥–∏...")
            time.sleep(3)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"   –£—Å–ø—ñ—à–Ω–æ: {success_count}/{total_tests}")
    print(f"   –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {(success_count/total_tests)*100:.1f}%")
    
    if success_count == total_tests:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏")
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ—Å—Ç —Ä—ñ–∑–Ω–∏—Ö URLs
    print("\nüîÑ –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ—Å—Ç —Ä—ñ–∑–Ω–∏—Ö endpoints:")
    for url in test_urls[1:]:
        print(f"   –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {url}...")
        test_data = generate_test_data(device_id)
        test_http_request(test_data, url)

def test_json_serialization():
    """–¢–µ—Å—Ç—É—î —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é JSON"""
    print("\nüß™ –¢–µ—Å—Ç —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó JSON:")
    
    test_data = {
        "device_id": str(uuid.uuid4()),
        "temperature": 25.67,
        "unit": "celsius",
        "timestamp": datetime.now().isoformat(),
        "metadata": {
            "location": "test_room",
            "sensor_type": "DHT22"
        }
    }
    
    try:
        json_str = json.dumps(test_data, indent=2)
        parsed_data = json.loads(json_str)
        
        print("‚úÖ JSON —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è/–¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞")
        print(f"   –†–æ–∑–º—ñ—Ä JSON: {len(json_str)} –±–∞–π—Ç")
        
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ JSON: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É"""
    try:
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ—Å—Ç
        run_quick_test()
        
        # –¢–µ—Å—Ç JSON
        test_json_serialization()
        
        print("\n‚ú® –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()