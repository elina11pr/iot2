import requests
import json
import random
import time
import uuid
from datetime import datetime

class IoTDevice:
    def __init__(self, webhook_url, device_id=None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è IoT –ø—Ä–∏—Å—Ç—Ä–æ—é
        
        Args:
            webhook_url (str): URL –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö
            device_id (str): –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–∏—Å—Ç—Ä–æ—é (–≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ)
        """
        self.webhook_url = webhook_url
        self.device_id = device_id or str(uuid.uuid4())
        self.min_temp = 20
        self.max_temp = 30
        
    def generate_temperature(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤—ñ–¥ 20 –¥–æ 30¬∞C"""
        return round(random.uniform(self.min_temp, self.max_temp), 2)
    
    def create_payload(self, temperature):
        """–°—Ç–≤–æ—Ä—é—î JSON payload –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–∏—Å—Ç—Ä–æ—é"""
        return {
            "device_id": self.device_id,
            "temperature": temperature,
            "unit": "celsius",
            "timestamp": datetime.now().isoformat()
        }
    
    def send_data(self, payload):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥–∞–Ω—ñ –Ω–∞ webhook URL"""
        try:
            headers = {
                'Content-Type': 'application/json',
                'User-Agent': f'IoT-Device/{self.device_id}'
            }
            
            response = requests.post(
                self.webhook_url,
                json=payload,
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {payload['temperature']}¬∞C")
            else:
                print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: HTTP {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –ø—Ä–∏—Å—Ç—Ä–æ—é"""
        print(f"üöÄ IoT –ø—Ä–∏—Å—Ç—Ä—ñ–π {self.device_id} –∑–∞–ø—É—â–µ–Ω–æ")
        print(f"üì° –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –Ω–∞: {self.webhook_url}")
        print("‚è±Ô∏è  –Ü–Ω—Ç–µ—Ä–≤–∞–ª: 5 —Å–µ–∫—É–Ω–¥")
        print("-" * 50)
        
        while True:
            try:
                # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                temperature = self.generate_temperature()
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ payload
                payload = self.create_payload(temperature)
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ
                self.send_data(payload)
                
                # –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥
                time.sleep(5)
                
            except KeyboardInterrupt:
                print("\nüõë –ü—Ä–∏—Å—Ç—Ä—ñ–π –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                time.sleep(5)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    # URL –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π)
    webhook_url = "https://webhook.site/your-unique-url"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ IoT –ø—Ä–∏—Å—Ç—Ä—ñ–π
    device = IoTDevice(webhook_url)
    device.run()


if __name__ == "__main__":
    main() 