#!/usr/bin/env python3
"""
IoT –ø—Ä–∏—Å—Ç—Ä—ñ–π —Å–∏–º—É–ª—è—Ç–æ—Ä –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
–ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —á–µ—Ä–µ–∑ HTTP POST
"""

import json
import random
import time
import uuid
from datetime import datetime
from typing import Optional, Dict, Any
import requests
from requests.exceptions import (
    ConnectionError, 
    Timeout, 
    HTTPError, 
    RequestException
)
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('iot_device.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class IoTDevice:
    """–ö–ª–∞—Å –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó IoT –ø—Ä–∏—Å—Ç—Ä–æ—é"""
    
    def __init__(self, device_id: Optional[str] = None, webhook_url: str = ""):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è IoT –ø—Ä–∏—Å—Ç—Ä–æ—é
        
        Args:
            device_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–∏—Å—Ç—Ä–æ—é
            webhook_url: URL –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö
        """
        self.device_id = device_id or str(uuid.uuid4())
        self.webhook_url = webhook_url or "https://httpbin.org/post"
        self.min_temp = 20.0
        self.max_temp = 30.0
        self.interval = 5  # —Å–µ–∫—É–Ω–¥–∏
        self.max_retries = 3
        self.retry_delay = 2  # —Å–µ–∫—É–Ω–¥–∏
        self.request_timeout = 10  # —Å–µ–∫—É–Ω–¥–∏
        self.session = requests.Session()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è HTTP —Å–µ—Å—ñ—ó
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': f'IoT-Device/{self.device_id}'
        })
        
        logger.info(f"IoT –ø—Ä–∏—Å—Ç—Ä—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {self.device_id}")
        logger.info(f"Webhook URL: {self.webhook_url}")

    def generate_temperature_data(self) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä—É—î –¥–∞–Ω—ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–∏—Å—Ç—Ä–æ—é
        """
        temperature = round(random.uniform(self.min_temp, self.max_temp), 2)
        timestamp = datetime.now().isoformat()
        
        data = {
            "device_id": self.device_id,
            "temperature": temperature,
            "unit": "celsius",
            "timestamp": timestamp,
            "metadata": {
                "sensor_type": "temperature",
                "location": "room_1",
                "status": "active"
            }
        }
        
        logger.debug(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –¥–∞–Ω—ñ: {temperature}¬∞C")
        return data

    def send_data(self, data: Dict[str, Any]) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥–∞–Ω—ñ –Ω–∞ webhook –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        
        Args:
            data: –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            
        Returns:
            True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, False - —ñ–Ω–∞–∫—à–µ
        """
        for attempt in range(1, self.max_retries + 1):
            try:
                response = self.session.post(
                    self.webhook_url,
                    json=data,
                    timeout=self.request_timeout
                )
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å—É
                response.raise_for_status()
                
                logger.info(f"‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {data['temperature']}¬∞C")
                logger.debug(f"HTTP Status: {response.status_code}")
                return True
                
            except ConnectionError as e:
                logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è (—Å–ø—Ä–æ–±–∞ {attempt}/{self.max_retries}): {e}")
                
            except Timeout as e:
                logger.warning(f"‚è∞ –¢–∞–π–º-–∞—É—Ç (—Å–ø—Ä–æ–±–∞ {attempt}/{self.max_retries}): {e}")
                
            except HTTPError as e:
                logger.error(f"üö´ HTTP –ø–æ–º–∏–ª–∫–∞: {e.response.status_code} - {e}")
                if e.response.status_code < 500:
                    # –ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ –ø–æ–º–∏–ª–∫–∞ (4xx) - –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏
                    return False
                    
            except RequestException as e:
                logger.error(f"üì° –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É (—Å–ø—Ä–æ–±–∞ {attempt}/{self.max_retries}): {e}")
                
            except Exception as e:
                logger.error(f"üí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                
            # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
            if attempt < self.max_retries:
                time.sleep(self.retry_delay)
                
        logger.error("‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ")
        return False

    def validate_webhook_url(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å webhook URL
        
        Returns:
            True —è–∫—â–æ URL –¥–æ—Å—Ç—É–ø–Ω–∏–π, False - —ñ–Ω–∞–∫—à–µ
        """
        try:
            response = self.session.get(
                self.webhook_url.replace('/post', '/get') if 'httpbin' in self.webhook_url else self.webhook_url,
                timeout=5
            )
            return response.status_code < 400
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ webhook URL: {e}")
            return False

    def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –ø—Ä–∏—Å—Ç—Ä–æ—é
        """
        print(f"üöÄ IoT –ø—Ä–∏—Å—Ç—Ä—ñ–π {self.device_id} –∑–∞–ø—É—â–µ–Ω–æ")
        print(f"üì° –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –Ω–∞: {self.webhook_url}")
        print(f"‚è±Ô∏è –Ü–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval} —Å–µ–∫—É–Ω–¥")
        print(f"üå°Ô∏è –î—ñ–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏: {self.min_temp}¬∞C - {self.max_temp}¬∞C")
        print("-" * 60)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ webhook URL
        if not self.validate_webhook_url():
            logger.warning("‚ö†Ô∏è Webhook URL –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        consecutive_failures = 0
        max_consecutive_failures = 5
        
        try:
            while True:
                try:
                    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö
                    data = self.generate_temperature_data()
                    success = self.send_data(data)
                    
                    if success:
                        consecutive_failures = 0
                    else:
                        consecutive_failures += 1
                        
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫
                    if consecutive_failures >= max_consecutive_failures:
                        logger.critical(f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {consecutive_failures} –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–± –ø–æ—Å–ø—ñ–ª—å")
                        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                        time.sleep(30)
                        consecutive_failures = 0
                        continue
                        
                    # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —ñ—Ç–µ—Ä–∞—Ü—ñ—î—é
                    time.sleep(self.interval)
                    
                except KeyboardInterrupt:
                    logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                    break
                    
                except Exception as e:
                    logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
                    logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(10)
                    
        except Exception as e:
            logger.critical(f"üíÄ –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            
        finally:
            self.cleanup()

    def cleanup(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        logger.info("üßπ –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤...")
        if hasattr(self, 'session'):
            self.session.close()
        logger.info("üëã IoT –ø—Ä–∏—Å—Ç—Ä—ñ–π –∑—É–ø–∏–Ω–µ–Ω–æ")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (–º–æ–∂–Ω–∞ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª config.json)
    config = {
        "webhook_url": "https://httpbin.org/post",  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à URL
        "device_id": None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è UUID
        "min_temp": 18.0,
        "max_temp": 32.0,
        "interval": 5
    }
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –ø—Ä–∏—Å—Ç—Ä–æ—é
    device = IoTDevice(
        device_id=config["device_id"],
        webhook_url=config["webhook_url"]
    )
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    device.min_temp = config["min_temp"]
    device.max_temp = config["max_temp"]
    device.interval = config["interval"]
    
    # –ó–∞–ø—É—Å–∫
    device.run()


if __name__ == "__main__":
    main()