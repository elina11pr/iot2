#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–π–æ–º—É –¥–∞–Ω–∏—Ö –≤—ñ–¥ IoT –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
"""

from flask import Flask, request, jsonify
from datetime import datetime
import json
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤ –ø–∞–º'—è—Ç—ñ
received_data = []

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–Ω–∏–∫ webhook –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—ñ–¥ IoT –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤"""
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è JSON –¥–∞–Ω–∏—Ö
        data = request.get_json()
        
        if not data:
            logger.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ")
            return jsonify({
                "status": "error", 
                "message": "–ü–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ"
            }), 400
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        required_fields = ['device_id', 'temperature', 'timestamp']
        missing_fields = [field for field in required_fields if field not in data]
        
        if missing_fields:
            logger.warning(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è: {missing_fields}")
            return jsonify({
                "status": "error",
                "message": f"–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: {missing_fields}"
            }), 400
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
        try:
            temperature = float(data['temperature'])
            if not isinstance(data['device_id'], str) or not data['device_id'].strip():
                raise ValueError("device_id –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º")
        except (ValueError, TypeError) as e:
            logger.warning(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö: {e}")
            return jsonify({
                "status": "error",
                "message": f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö: {e}"
            }), 400
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Å—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        data['received_at'] = datetime.now().isoformat()
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        received_data.append(data)
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        logger.info(f"üì® –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –≤—ñ–¥ {data['device_id']}: {temperature}¬∞C")
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É
        response = {
            "status": "success",
            "message": "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ",
            "received_at": data['received_at'],
            "data_count": len(received_data)
        }
        
        return jsonify(response), 200
        
    except json.JSONDecodeError:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON")
        return jsonify({
            "status": "error",
            "message": "–ù–µ–≤—ñ—Ä–Ω–∏–π JSON —Ñ–æ—Ä–º–∞—Ç"
        }), 400
        
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return jsonify({
            "status": "error",
            "message": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }), 500

@app.route('/data', methods=['GET'])
def get_data():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    try:
        device_id = request.args.get('device_id')
        limit = request.args.get('limit', type=int)
        
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ device_id
        filtered_data = received_data
        if device_id:
            filtered_data = [d for d in received_data if d.get('device_id') == device_id]
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤
        if limit and limit > 0:
            filtered_data = filtered_data[-limit:]
        
        return jsonify({
            "status": "success",
            "total_count": len(received_data),
            "filtered_count": len(filtered_data),
            "data": filtered_data
        }), 200
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        return jsonify({
            "status": "error",
            "message": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö"
        }), 500

@app.route('/stats', methods=['GET'])
def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    try:
        if not received_data:
            return jsonify({
                "status": "success",
                "message": "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö",
                "stats": {}
            }), 200
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        devices = set(d.get('device_id') for d in received_data)
        temperatures = [float(d.get('temperature', 0)) for d in received_data if 'temperature' in d]
        
        stats = {
            "total_records": len(received_data),
            "unique_devices": len(devices),
            "devices": list(devices),
            "temperature_stats": {
                "min": min(temperatures) if temperatures else 0,
                "max": max(temperatures) if temperatures else 0,
                "avg": sum(temperatures) / len(temperatures) if temperatures else 0,
                "count": len(temperatures)
            }
        }
        
        return jsonify({
            "status": "success",
            "stats": stats
        }), 200
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            "status": "error",
            "message": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        }), 500

@app.route('/clear', methods=['POST'])
def clear_data():
    """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    global received_data
    try:
        count = len(received_data)
        received_data.clear()
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {count} –∑–∞–ø–∏—Å—ñ–≤")
        
        return jsonify({
            "status": "success",
            "message": f"–û—á–∏—â–µ–Ω–æ {count} –∑–∞–ø–∏—Å—ñ–≤"
        }), 200
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        return jsonify({
            "status": "error",
            "message": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö"
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "records_count": len(received_data)
    }), 200

@app.errorhandler(404)
def not_found(error):
    return jsonify({
        "status": "error",
        "message": "Endpoint –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    }), 404

@app.errorhandler(405)
def method_not_allowed(error):
    return jsonify({
        "status": "error",
        "message": "HTTP –º–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ"
    }), 405

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        "status": "error",
        "message": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    }), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üì° –î–æ—Å—Ç—É–ø–Ω—ñ endpoints:")
    print("  POST /webhook - –ü—Ä–∏–π–æ–º –¥–∞–Ω–∏—Ö –≤—ñ–¥ IoT –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤")
    print("  GET  /data    - –ü–µ—Ä–µ–≥–ª—è–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
    print("  GET  /stats   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("  POST /clear   - –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
    print("  GET  /health  - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É")
    print("-" * 50)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(
        host='0.0.0.0',  # –î–æ—Å—Ç—É–ø –∑ –±—É–¥—å-—è–∫–æ—ó IP
        port=5000,
        debug=True,      # –†–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–∫–∏
        threaded=True    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –±–∞–≥–∞—Ç—å–æ—Ö –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    )